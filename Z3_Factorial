(echo  "STARTING FACTORIAL ...")
(echo " ---------------------------- ") 
; creating Var and Lab datatypes 

(declare-datatypes () ((V X Y Z)))
(declare-datatypes () ((L l1 l2 l3 l4 l5 l6 l?)))

; EN1 STARTS
(define-fun En1 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l?))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )  
 ; EN1 ENDS 
 
 ; EX1 STARTS
(define-fun Ex1 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )  
 ; EX1 ENDS 
 
 (define-fun En2 ((v!1 V)(l!1 L)) Bool 
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
       
 )
 
 ;;;;; here
 
 
 (define-fun Ex2 ((v!1 V)(l!1 L)) Bool 
  
    (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
  )
  
 ) 
 
 (define-fun En3 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 ) 
 
  (define-fun Ex3 ((v!1 V)(l!1 L)) Bool 
  
   (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 ) 
 
 
 (define-fun En4 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 ) 
 
  (define-fun Ex4 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 )
 
 
 
 (define-fun En5 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 ) 
 
  (define-fun Ex5 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l5))
        (and (= v!1 Z)(= l!1 l4))
  )
  
 )
 
 (define-fun En6 ((v!1 V)(l!1 L)) Bool 
   
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
        (and (= v!1 Z)(= l!1 l2))
  )
  
 ) 
 
  (define-fun Ex6 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l6))
        (and (= v!1 Z)(= l!1 l2))
        (and (= v!1 Z)(= l!1 l4))
  )
  
 )
 ; ASSERTIONS START HERE 
 
 ; ASSERTION 1
 (assert                     
   
   (forall ((v V)(l L)) 
     
        (ite 
              (= v Y)
                          
                (ite
                      (= l l1)
                      (Ex1 v l)                      
                      (not (Ex1 v l) ); else this
                        
                 )
                (= (Ex1 v l)(En1 v l)); else this line 
         )
   )
 )
 (echo " ---------------------------- ") 
 (echo " Asserting that Y has an assignment in label 1 ")
 (check-sat)

; ASSERTION 2
 
 (assert
   
   (forall ((v V)(l L))
     (= (En2 v l)(Ex1 v l))
     
   )
   
 )
(echo " ---------------------------- ") 
(echo " Asserting that exit-1 equals entry-2 ")
(check-sat) 

; ASSERTION 3

(assert                     
   
   (forall ((v V)(l L)) 
     
        (ite 
              (= v Z)
                          
                (ite
                      (= l l2)
                      (Ex2 v l)                      
                      (not (Ex2 v l) ); else this
                        
                 )
                (= (En2 v l)(Ex2 v l)); else this line 
         )
   )
 )
 (echo " ---------------------------- ") 
 (echo " Asserting that Z has an assignment in label 2 ")
 (check-sat)
 
 ; ASSERTION 4
 
(assert                     
   
   (forall ((v V)(l L)) 
     
      (= (En3 v l)
            
            (or 
              (Ex2 v l)
              (Ex5 v l)  
            )  
      )                        
         
   )
 ) 
 
 (echo " ---------------------------- ") 
 (echo " Asserting that entry-3 can have assignments from both exit-2 or exit-5  ")
 (check-sat)

 
