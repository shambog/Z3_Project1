(echo  "starting Factorial ...")

; creating Var and Lab datatypes 
; ALL CAPS ???????
(declare-datatypes () ((V X Y Z)))
(declare-datatypes () ((L l1 l2 l3 l4 l5 l6 l?)))

; EN1 STARTS
(define-fun En1 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l?))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )  
 ; EN1 ENDS 
 
 ; EX1 STARTS
(define-fun Ex1 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )  
 ; EX1 ENDS 
 
 (assert                        ; LINKING ENTRY-1 WITH EXIT-1
   
   (forall ((v!1 V)(l!1 L)) 
     
        (ite 
              (= v!1 Y)
                          
                (ite
                      (= l!1 l1)
                      (Ex1 v!1 l!1)                      
                      (not (Ex1 v!1 l!1) ); else this
                        
                 )
                (= (Ex1 v!1 l!1)(En1 v!1 l!1)); else this line 
         )
   )
 )
 
 
 
 (define-fun En2 ((v!1 V)(l!1 L)) Bool 
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
       
 )
 
 ;;;;; here
 
 
 (define-fun Ex2 ((v!1 V)(l!1 L)) Bool 
  
    (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
  )
  
 ) 
 
 (define-fun En3 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l2))
        (and (= v!1 Z)(= l!1 l4))
        (and (= v!1 Y)(= l!1 l5))
  )
  
 ) 
 
  (define-fun Ex3 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 ) 
 
 
 (define-fun En4 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 ) 
 
  (define-fun Ex4 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )
 
 
 
 (define-fun En5 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 ) 
 
  (define-fun Ex5 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )
 
 (define-fun En6 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 ) 
 
  (define-fun Ex6 ((v!1 V)(l!1 L)) Bool 
  
  (
    or  (and (= v!1 X)(= l!1 l?))
        (and (= v!1 Y)(= l!1 l1))
        (and (= v!1 Z)(= l!1 l?))
  )
  
 )


   (assert (forall ((v!1 V) (l!1 L))
   
                        (= (En2 v!1)(Ex1 v!1)) ; EXIT OF LABEL-1 AND ENTRY OF LABEL-2 ARE THE SAME 
   
                  )
          ) 
